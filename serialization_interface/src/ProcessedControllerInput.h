// Generated by gencpp from file ArmControl/ProcessedControllerInput.msg
// DO NOT EDIT!


#ifndef ARMCONTROL_MESSAGE_PROCESSEDCONTROLLERINPUT_H
#define ARMCONTROL_MESSAGE_PROCESSEDCONTROLLERINPUT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace ArmControl
{
template <class ContainerAllocator>
struct ProcessedControllerInput_
{
  typedef ProcessedControllerInput_<ContainerAllocator> Type;

  ProcessedControllerInput_()
    : ControllerInput()  {
      ControllerInput.assign(0.0);
  }
  ProcessedControllerInput_(const ContainerAllocator& _alloc)
    : ControllerInput()  {
  (void)_alloc;
      ControllerInput.assign(0.0);
  }



   typedef boost::array<float, 6>  _ControllerInput_type;
  _ControllerInput_type ControllerInput;





  typedef boost::shared_ptr< ::ArmControl::ProcessedControllerInput_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ArmControl::ProcessedControllerInput_<ContainerAllocator> const> ConstPtr;

}; // struct ProcessedControllerInput_

typedef ::ArmControl::ProcessedControllerInput_<std::allocator<void> > ProcessedControllerInput;

typedef boost::shared_ptr< ::ArmControl::ProcessedControllerInput > ProcessedControllerInputPtr;
typedef boost::shared_ptr< ::ArmControl::ProcessedControllerInput const> ProcessedControllerInputConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ArmControl::ProcessedControllerInput_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ArmControl::ProcessedControllerInput_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ArmControl::ProcessedControllerInput_<ContainerAllocator1> & lhs, const ::ArmControl::ProcessedControllerInput_<ContainerAllocator2> & rhs)
{
  return lhs.ControllerInput == rhs.ControllerInput;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ArmControl::ProcessedControllerInput_<ContainerAllocator1> & lhs, const ::ArmControl::ProcessedControllerInput_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ArmControl

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::ArmControl::ProcessedControllerInput_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ArmControl::ProcessedControllerInput_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ArmControl::ProcessedControllerInput_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ArmControl::ProcessedControllerInput_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ArmControl::ProcessedControllerInput_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ArmControl::ProcessedControllerInput_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ArmControl::ProcessedControllerInput_<ContainerAllocator> >
{
  static const char* value()
  {
    return "75958cfd26b9f3109e9624e300e0ea48";
  }

  static const char* value(const ::ArmControl::ProcessedControllerInput_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x75958cfd26b9f310ULL;
  static const uint64_t static_value2 = 0x9e9624e300e0ea48ULL;
};

template<class ContainerAllocator>
struct DataType< ::ArmControl::ProcessedControllerInput_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ArmControl/ProcessedControllerInput";
  }

  static const char* value(const ::ArmControl::ProcessedControllerInput_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ArmControl::ProcessedControllerInput_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32[6] ControllerInput\n"
;
  }

  static const char* value(const ::ArmControl::ProcessedControllerInput_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ArmControl::ProcessedControllerInput_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.ControllerInput);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ProcessedControllerInput_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ArmControl::ProcessedControllerInput_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ArmControl::ProcessedControllerInput_<ContainerAllocator>& v)
  {
    s << indent << "ControllerInput[]" << std::endl;
    for (size_t i = 0; i < v.ControllerInput.size(); ++i)
    {
      s << indent << "  ControllerInput[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.ControllerInput[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // ARMCONTROL_MESSAGE_PROCESSEDCONTROLLERINPUT_H
