// Generated by gencpp from file DriveControl/WheelSpeed.msg
// DO NOT EDIT!


#ifndef DRIVECONTROL_MESSAGE_WHEELSPEED_H
#define DRIVECONTROL_MESSAGE_WHEELSPEED_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace DriveControl
{
template <class ContainerAllocator>
struct WheelSpeed_
{
  typedef WheelSpeed_<ContainerAllocator> Type;

  WheelSpeed_()
    : wheel_speed()  {
      wheel_speed.assign(0.0);
  }
  WheelSpeed_(const ContainerAllocator& _alloc)
    : wheel_speed()  {
  (void)_alloc;
      wheel_speed.assign(0.0);
  }



   typedef boost::array<float, 2>  _wheel_speed_type;
  _wheel_speed_type wheel_speed;





  typedef boost::shared_ptr< ::DriveControl::WheelSpeed_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::DriveControl::WheelSpeed_<ContainerAllocator> const> ConstPtr;

}; // struct WheelSpeed_

typedef ::DriveControl::WheelSpeed_<std::allocator<void> > WheelSpeed;

typedef boost::shared_ptr< ::DriveControl::WheelSpeed > WheelSpeedPtr;
typedef boost::shared_ptr< ::DriveControl::WheelSpeed const> WheelSpeedConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::DriveControl::WheelSpeed_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::DriveControl::WheelSpeed_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::DriveControl::WheelSpeed_<ContainerAllocator1> & lhs, const ::DriveControl::WheelSpeed_<ContainerAllocator2> & rhs)
{
  return lhs.wheel_speed == rhs.wheel_speed;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::DriveControl::WheelSpeed_<ContainerAllocator1> & lhs, const ::DriveControl::WheelSpeed_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace DriveControl

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::DriveControl::WheelSpeed_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::DriveControl::WheelSpeed_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::DriveControl::WheelSpeed_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::DriveControl::WheelSpeed_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::DriveControl::WheelSpeed_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::DriveControl::WheelSpeed_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::DriveControl::WheelSpeed_<ContainerAllocator> >
{
  static const char* value()
  {
    return "8c6e71de3f360b0a3cdd9932ddf83751";
  }

  static const char* value(const ::DriveControl::WheelSpeed_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x8c6e71de3f360b0aULL;
  static const uint64_t static_value2 = 0x3cdd9932ddf83751ULL;
};

template<class ContainerAllocator>
struct DataType< ::DriveControl::WheelSpeed_<ContainerAllocator> >
{
  static const char* value()
  {
    return "DriveControl/WheelSpeed";
  }

  static const char* value(const ::DriveControl::WheelSpeed_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::DriveControl::WheelSpeed_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32[2] wheel_speed\n"
;
  }

  static const char* value(const ::DriveControl::WheelSpeed_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::DriveControl::WheelSpeed_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.wheel_speed);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct WheelSpeed_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::DriveControl::WheelSpeed_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::DriveControl::WheelSpeed_<ContainerAllocator>& v)
  {
    s << indent << "wheel_speed[]" << std::endl;
    for (size_t i = 0; i < v.wheel_speed.size(); ++i)
    {
      s << indent << "  wheel_speed[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.wheel_speed[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // DRIVECONTROL_MESSAGE_WHEELSPEED_H
