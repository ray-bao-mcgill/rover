// Generated by gencpp from file lidar/LidarData.msg
// DO NOT EDIT!


#ifndef LIDAR_MESSAGE_LIDARDATA_H
#define LIDAR_MESSAGE_LIDARDATA_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace lidar
{
template <class ContainerAllocator>
struct LidarData_
{
  typedef LidarData_<ContainerAllocator> Type;

  LidarData_()
    : distances()
    , vertical_angle(0.0)  {
      distances.assign(0.0);
  }
  LidarData_(const ContainerAllocator& _alloc)
    : distances()
    , vertical_angle(0.0)  {
  (void)_alloc;
      distances.assign(0.0);
  }



   typedef boost::array<float, 360>  _distances_type;
  _distances_type distances;

   typedef float _vertical_angle_type;
  _vertical_angle_type vertical_angle;





  typedef boost::shared_ptr< ::lidar::LidarData_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::lidar::LidarData_<ContainerAllocator> const> ConstPtr;

}; // struct LidarData_

typedef ::lidar::LidarData_<std::allocator<void> > LidarData;

typedef boost::shared_ptr< ::lidar::LidarData > LidarDataPtr;
typedef boost::shared_ptr< ::lidar::LidarData const> LidarDataConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::lidar::LidarData_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::lidar::LidarData_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::lidar::LidarData_<ContainerAllocator1> & lhs, const ::lidar::LidarData_<ContainerAllocator2> & rhs)
{
  return lhs.distances == rhs.distances &&
    lhs.vertical_angle == rhs.vertical_angle;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::lidar::LidarData_<ContainerAllocator1> & lhs, const ::lidar::LidarData_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace lidar

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::lidar::LidarData_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::lidar::LidarData_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::lidar::LidarData_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::lidar::LidarData_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::lidar::LidarData_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::lidar::LidarData_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::lidar::LidarData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f210c2256af4ffa3e52b4e5562293f64";
  }

  static const char* value(const ::lidar::LidarData_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf210c2256af4ffa3ULL;
  static const uint64_t static_value2 = 0xe52b4e5562293f64ULL;
};

template<class ContainerAllocator>
struct DataType< ::lidar::LidarData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "lidar/LidarData";
  }

  static const char* value(const ::lidar::LidarData_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::lidar::LidarData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32[360] distances\n"
"float32 vertical_angle\n"
"\n"
;
  }

  static const char* value(const ::lidar::LidarData_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::lidar::LidarData_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.distances);
      stream.next(m.vertical_angle);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct LidarData_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::lidar::LidarData_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::lidar::LidarData_<ContainerAllocator>& v)
  {
    s << indent << "distances[]" << std::endl;
    for (size_t i = 0; i < v.distances.size(); ++i)
    {
      s << indent << "  distances[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.distances[i]);
    }
    s << indent << "vertical_angle: ";
    Printer<float>::stream(s, indent + "  ", v.vertical_angle);
  }
};

} // namespace message_operations
} // namespace ros

#endif // LIDAR_MESSAGE_LIDARDATA_H
