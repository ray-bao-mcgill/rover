# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'F:/Shaswata/Robotics/rover/UI_App/qt_ui_files/ui_layout.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets

import cv2

from PyQt5.QtWidgets import *
from PyQt5.QtGui import *
from PyQt5.QtCore import *

from drive_layout import Ui_DriveTab, Ui_DriveTab
from arm_layout import Ui_Arm

# Thread for running camera feeds
class Thread(QThread):
    # defines signal that will emit QImage object (after conversion from OpenCV array)
    pixmapSignal = pyqtSignal(QImage)

    threadActive = True

    def run(self):
        cam = cv2.VideoCapture(0)

        while self.threadActive:
            ret_val, cv_image = cam.read()
            # if return value received, convert the image obtained from Numpy array to pixmap for Qt
            # conversion code found here: https://github.com/docPhil99/opencvQtdemo/blob/master/staticLabel2.py
            if ret_val:
                rgb_image = cv2.cvtColor(cv_image, cv2.COLOR_BGR2RGB)
                h, w, ch = rgb_image.shape
                bytes_per_line = ch * w
                convert_to_Qt = QImage(rgb_image.data, w, h, bytes_per_line, QImage.Format_RGB888)
                p = convert_to_Qt.scaled(640, 480, Qt.KeepAspectRatio)
                self.pixmapSignal.emit(p)

    @pyqtSlot()
    def stop(self):
        self.threadActive = False # sets flag as false to stop loop
        self.terminate()

    

class Ui_MainWindow(object):
    closeCam = pyqtSignal()

    @pyqtSlot(QImage) # defines a slot
    def updateImage(self, img):
        self.Camera.setPixmap(QPixmap.fromImage(img)) # edit camera label to display camera feed
    
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(800, 600)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.Systemsview = QtWidgets.QTabWidget(self.centralwidget)
        self.Systemsview.setGeometry(QtCore.QRect(470, 10, 301, 531))
        self.Systemsview.setObjectName("Systemsview")
        
        #
        self.Arm = Ui_Arm()
        self.Arm.setupUi(self.Arm)
        #

        self.Systemsview.addTab(self.Arm, "")

        #
        self.Drive = Ui_DriveTab()
        self.Drive.setupUi(self.Drive)
        #
        self.Systemsview.addTab(self.Drive, "")
        self.Science = QtWidgets.QWidget()
        self.Science.setObjectName("Science")
        self.Systemsview.addTab(self.Science, "")
        self.Autonomy = QtWidgets.QWidget()
        self.Autonomy.setObjectName("Autonomy")
        self.Systemsview.addTab(self.Autonomy, "")
        self.camera_selector = QtWidgets.QComboBox(self.centralwidget)
        self.camera_selector.setGeometry(QtCore.QRect(10, 290, 131, 31))
        self.camera_selector.setObjectName("camera_selector")
        self.camera_selector.addItem("")
        self.camera_selector.addItem("")
        self.camera_selector.addItem("")
        self.camera_selector.addItem("")
        self.camera_selector.addItem("")
        self.camera_selector.addItem("")
        self.Camera = QtWidgets.QLabel(self.centralwidget)
        self.Camera.setGeometry(QtCore.QRect(10, 10, 411, 271))
        font = QtGui.QFont()
        font.setPointSize(14)
        self.Camera.setFont(font)
        self.Camera.setFrameShape(QtWidgets.QFrame.Box)
        self.Camera.setLineWidth(2)
        self.Camera.setObjectName("Camera")
        self.OverallFeedback = QtWidgets.QWidget(self.centralwidget)
        self.OverallFeedback.setGeometry(QtCore.QRect(10, 360, 311, 191))
        self.OverallFeedback.setObjectName("OverallFeedback")
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(10, 340, 151, 17))
        font = QtGui.QFont()
        font.setPointSize(14)
        self.label.setFont(font)
        self.label.setObjectName("label")
        self.control_selector = QtWidgets.QComboBox(self.centralwidget)
        self.control_selector.setGeometry(QtCore.QRect(160, 290, 181, 31))
        self.control_selector.setObjectName("control_selector")
        self.control_selector.addItem("")
        self.control_selector.addItem("")
        self.control_selector.addItem("")
        self.control_selector.addItem("")
        self.control_selector.addItem("")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 800, 22))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        self.Systemsview.setCurrentIndex(0)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Rover UI"))
        self.Systemsview.setTabText(self.Systemsview.indexOf(self.Arm), _translate("MainWindow", "Arm"))
        self.Systemsview.setTabText(self.Systemsview.indexOf(self.Drive), _translate("MainWindow", "Drive "))
        self.Systemsview.setTabText(self.Systemsview.indexOf(self.Science), _translate("MainWindow", "Science"))
        self.Systemsview.setTabText(self.Systemsview.indexOf(self.Autonomy), _translate("MainWindow", "Autonomy"))
        self.camera_selector.setCurrentText(_translate("MainWindow", "Cam 1"))
        self.camera_selector.setItemText(0, _translate("MainWindow", "Cam 1"))
        self.camera_selector.setItemText(1, _translate("MainWindow", "Cam 2"))
        self.camera_selector.setItemText(2, _translate("MainWindow", "Cam 3"))
        self.camera_selector.setItemText(3, _translate("MainWindow", "Cam 4"))
        self.camera_selector.setItemText(4, _translate("MainWindow", "Cam 5"))
        self.camera_selector.setItemText(5, _translate("MainWindow", "Cam 6"))
        # self.Camera.setText(_translate("MainWindow", "Camera (add pixmap)"))
        self.label.setText(_translate("MainWindow", "Overall Feedback"))
        self.control_selector.setItemText(0, _translate("MainWindow", "Arm-Joint Control"))
        self.control_selector.setItemText(1, _translate("MainWindow", "Arm-Cartesian Control"))
        self.control_selector.setItemText(2, _translate("MainWindow", "Drive"))
        self.control_selector.setItemText(3, _translate("MainWindow", "Science"))
        self.control_selector.setItemText(4, _translate("MainWindow", "Autonomy"))
    
    def displayCamera(self):
        # intialize thread + connect signal received from thread (video data) to update image function
        newThread = Thread(self)
        newThread.pixmapSignal.connect(self.updateImage)
        self.closeCam.connect(newThread.stop) # connect signal to stop method
        newThread.start()
    
    # calls super class' closeEvent method (window closed)
    def closeEvent(self, event):
        self.closeCam.emit() # emit signal to stop thread
        

